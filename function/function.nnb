{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# 函数\n- 闭包\n- 箭头函数\n- 生成器函数\n\n回调函数\n存储函数\n自记忆函数\n\n函数创建方式\n\n1. 函数声明  函数名必须有\n2. 函数表达式 函数名可选\n3. 箭头函数\n4. 函数构造函数 动态生成函数\n5. 生成器函数\n\n具名函数/匿名函数\n立即执行函数\n\n函数形参和实参\n形参： 函数声明或定义时列举的变量\n实参： 函数调用或执行时传递给函数的值\n函数调用时，所提供的实参会按照形参在函数中定义的顺序依次赋值给形参，形参与实参数量并不需要一样，当形参数量不够时，多余的实参会被丢掉,而当实参数量不够时，不够的形参值会被置为undefined。\n\n默认参数 占位符undefined\n函数调用时，没有实参相匹配的形参，默认参数可以给提供缺省的参数值。\n\n剩余参数\n不与任何形参相匹配的额外实参可以通过剩余参数来引用。只有最后一个参数才能是剩余参数，它会收集指明形参之外多余传入的参数。它最终会是一个真正的数组。\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 箭头函数\n\n箭头函数的this绑定在定义箭头函数时的所引用的对象上，即使是bind()方法也不能改变。\n箭头函数中不能使用yiled,也不支持arguments对象。"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "函数作为参数传递给另外一个函数\n- 引用在某个地方声明的声明的函数\n- 在函数内部中声明然后作为参数传入\n- 在函数表达式中就地声明作为参数"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 使用具名函数参数\n使用对象收集函数参数，特别是处理可选参数和默认参数时特别方便。"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function dateDifferenceInSeconds(newDate, oldDate, { discardTime, discardYear, precision } = {}) {\n  if (discardTime) {\n    newDate = newDate.setHours(0, 0, 0, 0);\n    oldDate = oldDate.setHours(0, 0, 0, 0);\n  }\n  if (discardYear) {\n    newDate.setYear(0);\n    oldDate.setYear(0);\n  }\n  const differenceInSeconds = (newDate.getTime() - oldDate.getTime()) / 1000;\n  return differenceInSeconds.toFixed(precision);\n}\n\nconst newDate = new Date()\nconst oldDate = new Date(2024, 8, 1);\nconsole.log(dateDifferenceInSeconds(newDate, oldDate()));\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 定义在闭包中存储状态的函数"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function createCounter(label = '') {\n  let count = 0;\n  return function counter() {\n    count += 1;\n    console.log(label, count);\n  }\n}\n\nconst counter1 = createCounter('counter1');\ncounter1();\ncounter1();\n\n\nconst counter2 = createCounter('counter2');\ncounter2();\ncounter2();\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "counter1 1",
                                "counter1 2",
                                "counter2 1",
                                "counter2 2",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## 定义可产出多个值的生成器函数\n\n惰性执行模型 生成器每次返回一个之后便停止执行，直到调用方请求下一个值。生成器函数最后返回的值会被忽略。\n\n[jshash](https://github.com/bryc/code/tree/master/jshash)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function mulberry32(seed) {\n  return function random() {\n    let t = seed += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n  }\n}\n\nconst seed = 98345;\nconst random = mulberry32(seed);\nconsole.log(random(), random(), random());"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "0.9057375795673579 0.7620641703251749 0.02114417916163802",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function* mulberry32(seed) {\n  let t = seed += 0x6D2B79F5;\n  while (true) {\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    yield ((t ^ t >>> 14) >>> 0) / 4294967296;\n  }\n}\n\nconst seed = 98345;\nconst genRandom = mulberry32(seed);\nconsole.log(genRandom.next().value, genRandom.next().value, genRandom.next().value );\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "0.9057375795673579 0.44091642647981644 0.7662326360587031",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## 使用部分应用技术减少冗余"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function makeString(prefix, str, suffix) {\n  return prefix + str + suffix;\n}\n\nconst quoteString = (str) => makeString('\"', str, '\"');\nconst namedEntity = (str) => makeString('&#', str, ';');\n\nconsole.log(quoteString(\"I'm a good man\"), namedEntity(129));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "\"I'm a good man\" &#129;",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function partial(fn, ...applyArgs) {\n  return function (...restArgs) {\n    const finalArgs = [...applyArgs];\n    let j = 0;\n    for (let i = 0; i < applyArgs.length; i++){\n      if (finalArgs[i] === undefined) {\n        finalArgs[i] = restArgs[j++];\n      }\n    }\n    if (j < restArgs.length) {\n      finalArgs.push(...restArgs.slice(j));\n    }\n    return fn(...finalArgs);\n  }\n}\n\nfunction makeString(prefix, str, suffix) {\n  return prefix + str + suffix;\n}\n\nconst quoteString = partial(makeString, '\"', undefined, '\"');\nconst namedEntityOne = partial(makeString, '&#');\nconst nameEntity = partial(namedEntityOne, undefined, ';')\n\nconsole.log(quoteString('haha'), nameEntity(234));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "\"haha\" &#234;",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}